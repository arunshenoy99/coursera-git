1. BRANCHES
	A POINTER TO A PARTICULAR COMMIT
	IT IS AN INDEPENDENT LINE OF DEVELOPMENT IN A PROJECT
	THE DEFAULT BRANCH THAT GIT CREATES FOR YOU IS CALLED MASTER AND ALL THE CHANGES WE HAVE DONE SO FAR ARE ON IT(USUALLY HAS A KNOWN GOOD STATE OF A PROJECT)
	WHEN U WANT TO TRY SOMETHING NEW IN THE PROJECT U CAN CREATE A NEW BRANCH THAT DOES NOT AFFECT MASTER
	BRANCHES CAN BE LIKE ROUGH WORK WE DO ON THE SIDE OF THE PAGE AND ONLY COPY THE POLISHED VERSION TO THE ACTUAL ANSWER

2. CREATING A NEW BRANCH
	git branch SHOWS ALL BRANCHES IN THE REPO
	git branch <branchname> CREATE A NEW BRANCH
	git checkout <branchname> CHANGE WORKING TREE(HEAD) TO BRANCH
	git checkout -b <branchname> CREATE NEW BRANCH AND SWITCH WORKING TREE TO IT
	NOW U CAN NORMALLY WORK ON THE BRANCH WITH USUAL ADD COMMIT COMMANDS

3. DELETING A BRANCH
	git branch -d <branchname>

4. MERGING BRANCHES
	COMBINE BRANCHED DATA AND HISTORY TOGETHER
	FIRST GOTO MASTER BRANCH USING CHECKOUT
	THEN USE git merge <branchname>
	GIT USES FAST FORWARD OR 3 WAY MERGE ALGORITHM FOR MERGING
	FAST FORWARD MERGE --> USED WHEN NO NEW COMMITS IN MASTER BRANCH AND ALL COMMITS WERE IN BRANCH, HERE HEAD AND BRANCH POINT TO LATEST COMMIT IN BRANCH
	3 WAY MERGE --> USED WHEN COMMITS ARE THERE IN MASTER BRANCH AFTER NEW BRANCH CREATED, IN THIS CASE A NEW COMMIT IS CREATED WITH CHANGES FROM BOTH COMMITS AND PLACED AT THE MOST RECENT COMMON 	ANCESTOR

5. MERGE CONFLICTS
	SUPPOSE WE CHANGED THE SAME FILE AND SAME LINES ON BOTH MASTER AND NEW BRANCH NOW GIT IS CONFUSED AS TO WHICH CHANGES TO BE INCLUDED HENCE WE HAVE A MERGE CONFLICT
	HERE WE MUST MANUALLY CHANGE THE FILES AND THEN MERGE THEM LATER
